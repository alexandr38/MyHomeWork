package testTxt;

/**
 * Created by Agryzkov on 08.07.2016.
 */
public class Test2Txt {

    /*
    * 1. примитивные типы - не являются обьектами, их восемь:
    * целочисленные: byte, short, int, long
    * дробные: long, double
    * логический:  boolean
    * символьный: char (можно пользовать как целочисленный)
    java неподдерживает целочисленные без знака.

    референс - сложный тип (например String), может быть обьектом

    2. Heap - куча, в ней хранятся все части программы и в ней создаются обьекты.
    Куча существует от начала и до конца программы.
    Обьекты в куче доступны из любой части программы.
    Стек - это область памяти, выделяемая в куче. В ней хранятся переменные примитивных типов и ссылки на обьект(сам обьект - в куче).
    Стек доступен только тому потоку, в котором был создан. Работает по принципу - последний вошел/первый вышел.
    Стек по обьему меньше кучи. Стек работает быстрее, чем куча.Уничтожаятся сразу после освобождения.(время жизни меньше кучи).
    При переполнении стека - StackOverflowError.
    При переполнении кучи - OutOfMemoryError Java Heap Space.

    3. класс - основная структура языка. может содержать поля(шаблон, описание обьекта) и методы, они являются членами класса.
    класс обьявляется при помощи ключевого слова class. классы могут наследоваться от других классов. родительский - это суперкласс.

    обьект - это сущность, создается на основе класса (как бы по шаблону) при помощи ключевого слова new.
    обьект создается в куче.

    4. статический - может быть метод, переменная. статический метод не зависит отобьекта и доступен без создания обьекта.
    статическая переменная - по сути глобальная, при создании новых обьектов на основе класса статическая переменная не создается для каждой копии,
    все копии будут работать с одной и той же переменной.Статические методы и переменные не могут ссылаться на this и super. и они видны за пределами
    класса( класс.переменная/метод).

    динамический метод зависит от обьекта и недоступен, пока обьект не будет создан. переменная соответственно своя для каждой копии.

    5. new - ключевое слово для создания новой переменной,строки, массива,обьекта (по сути: new String() - это вызов конструктора класса String для создания нового обьекта).
    this - ключевое слово
    используется при указании полей, например метод содержится в классе и на вход ему приходит переменная с таким же именем, как поле в классе
    class Class
    int count
    .....

    public metod(int count){
        this.count = count;} -- после this - это поле, после "=" переменная

    так же при вызове перегруженных методов, т.е. метод из метода.это ключевое слово должно быть всегда в первой строке.

    6. конструктор - это спец метод, который вызывается при создании нового обьекта и определяет действия, необходимые для создания нового обьекта.
    Он ничего никогда не возвращает.Имя конструктора совпадает с именем класса. Если в классе не описано явным образом ни одного конструктора,
    то система создаст по умолчанию - без параметров. если описан конструктор с параметрами, то дефолтный без параметров вызвать будет нельзя.

    7. User user = new User();
    1) создается переменная класса User
    2)вызывается конструктор класса для начальной инициализации обьекта в куче
    (выделение памяти под обьект и начальная инициализация)
    3)переменной передается ссылка на обьект

    8. overloading - перегрузка, используется для методов. Методы имеют одинаковое имя, но разный набаор входных параметров по колличеству/типу.
    public count  (); - ok
    public count (int i); - ok
    public count (int j); - fail
    public count (String str) - ok
    public count (String str, int i); - ok

    9. is-a - (является) наследование. подкласс зависит от родителя(меняется поведение родителя, ломается наследник), изменеия применяются на этапе компиляции.
    наследоваться можно только от одного класса, нельзя наследоваться от final.
     has-a -(имеет) композиция, подкласс не зависит от реализации родителя, изменения могут применяться run-time(во время исполнения). рекомендуется
     использование промежуточного класса - интерфейса для взаимодействия. можно использовать код из нескольких классов, в
     том числе и final.

    10.inheritance - наследование. наследуемый - суперКласс, наследник - подкласс. можно наследоваться от наследника, он станет суперклассом для другого
    подкласса. наследник содержит все от родителя и может иметь дополнительные новые свойства, которых не будет у родителя и родителю они не будут доступны.
    наследоваться можно только от одного класса. нельзя наследоваться от final-класса.

    class MyClass extends Class;

    11. super - ключевое слово для обращения к полям, методам класса-родителя.
    или при переопределении для вызова не текущего, а родительского метода.

    12. Abstraction - абстрактными бывают классы и методы. абстрактный класс не может содержать статических методов и абстрактных конструкторов.
    наследник абстрактного класса или должен содержать реализации всех методов родителя, или тоже должен обьявиться абстрактным.
    абстрактный метод - это описанный метод, не имеющий тела (конкретной реализации). Т.е. абстрактный класс/метод - это просто описание(название)
    без конкретной реализации.
    абстрактным можно обьявить и обычный класс, чтобы запретить создание экземпляров этого класса.

    13. 13. Polymorphism - способность обьекта использовать методы производного класса, который не существует на момент создания базового.
    по факту - работа с абстракциями. создается абстрактный класс с абстрактными методами(без конкретной реализации), а от него нужное кол-во
    потомков с конкретной реализацией и своими допю свойствами.

    14. overriding - переопределение мметода. перед названием метода ставится нотация - @Override.
    Это замена существующего метода своей реализацией, вызов метода остается без изменений.

    15.TDD


    */

}
